#!/usr/bin/env python3
#
# Create the gallery html page from the list of images found in img/
# using the database artworks.csv
#

from dataclasses import dataclass
from datetime import date
from typing import Any, Dict, List, Optional, TextIO, Tuple
import argparse
import csv
import json
import html
import math
import os
import re
import subprocess

FAVES_PATH = '/gallery'
ALL_PATH = '/gallery/all'
IMG_PATH = '/gallery/img'
ART_PATH = '/art'

@dataclass
class Page:
    # Folder containing the md and html files
    folder: str
    # Output file
    md_file: str
    # page-specific HTML data to insert at the beginning of the page
    page_specific_html: str
    # CSV rows of artworks to display
    rows: List[Dict[str, str]]

# The built-in '.capitalize()' method will downcase the rest of the string,
# which we don't want.
def capitalize_first_char(s: str) -> str:
    if len(s) > 0:
        return s[0].upper() + s[1:]
    else:
        return s

# Zero-width matching just before a letter that should be capitalized
# according to English usage.
# This works only for standard English letters a-z.
WORD_START_RE = r"(?:^|(?<=\s))(?=[a-z])"

# Because '.title()' does a shit job.
#
# This capitalizes too much. Capitalization rules for English require
# distinguishing nouns from other words, which requires a dictionary.
# Let's not use this function.
def capitalize_all_words(s: str) -> str:
    return "".join([ capitalize_first_char(word)
                     for word in re.split(WORD_START_RE, s) ])

def capitalize_fr(s: str) -> str:
    return capitalize_first_char(s)

def capitalize_en(s: str) -> str:
    return capitalize_first_char(s)

# Uses 'identify' from ImageMagick
def image_dimensions(image_filename: str) -> Tuple[int, int]:
    p = subprocess.run([
        "identify",
        "-format",
        '{"width":%[fx:w], "height":%[fx:h]}',
        image_filename
    ], capture_output=True)
    dic = json.loads(p.stdout.decode())
    return (dic['width'], dic['height'])

def figure_scaling(image_filename: str) -> float:
    (width, height) = image_dimensions(image_filename)
    aspect_ratio = float(width) / float(height)
    # sqrt(2) is the aspect ratio of A5, A4, A3, etc.
    max_aspect_ratio = math.sqrt(2.)
    if aspect_ratio >= max_aspect_ratio:
        return 1.0
    else:
        return math.sqrt(aspect_ratio / max_aspect_ratio)

def needs_rebuild(src: str, dst: str) -> bool:
    return not os.path.isfile(dst) \
        or os.path.getmtime(dst) < os.path.getmtime(src)

def inches_to_cm(x: float) -> float:
    return 2.54 * x

def format_dimensions(row: Dict[str, str]) -> Optional[str]:
    width_cm = -1.0
    height_cm = -1.0
    if row['width_in'] and row['height_in']:
        width_cm = inches_to_cm(float(row['width_in']))
        height_cm = inches_to_cm(float(row['height_in']))
    if row['width_cm'] and row['height_cm']:
        width_cm = float(row['width_cm'])
        height_cm = float(row['height_cm'])
    if width_cm > 0:
        return f"{width_cm:.1f} cm Ã— {height_cm:.1f} cm"
    else:
        return None

def format_support(row: Dict[str, str]) -> Optional[str]:
    support = row['support']
    if support:
        return support
    else:
        return None

def format_location(row: Dict[str, str]) -> Optional[str]:
    poss = row['possessor_kind']
    if poss == 'private' or poss == 'family':
        return 'Private collection'
    elif poss == 'ephemeral':
        return 'Ephemeral'
    else:
        return None

def verbose_command(argv: List[str]) -> None:
    print(f"{' '.join(argv)}")
    subprocess.run(argv)

def get_title(row: Dict[str, str]) -> str:
    title_en = capitalize_en(row['title_en'])
    title_fr = capitalize_fr(row['title_fr'])
    title_lang = row['title_lang']
    title1 = None
    title2 = None
    if title_lang == "en":
        title1 = title_en
        title2 = title_fr
    elif title_lang == "fr":
        title1 = title_fr
        title2 = title_en
    elif title_lang:
        raise Exception(f"Unsupported language '{title_lang}' in row {row}")
    if title1:
        title = title1
        if title2 and title2 != title1:
            title = f"{title} ({title2})"
        return title
    else:
        return 'Untitled'

def make_standalone_page(row: Dict[str, str]) -> str:
    artwork_id = row['artwork_id']
    img_id = row['image_id']
    year = date.fromisoformat(row['date']).year
    title = get_title(row)
    img_name = img_id + '.jpg'
    hash_name = img_id

    img_url = IMG_PATH + '/large/' + img_name
    html_dir = 'art/' + artwork_id
    html_file = html_dir + '/index.html'
    os.makedirs(html_dir, exist_ok=True)

    # URL of this page, to be returned to the caller
    img_page_url = ART_PATH + '/' + artwork_id

    # URL to this artwork on the gallery listing
    gallery_url = f"{ALL_PATH}#{hash_name}"

    main_caption = f"{title}"
    main_caption_html = f"""
<div>
  {html.escape(main_caption)}
</div>
"""

    dimensions = format_dimensions(row)
    support = format_support(row)
    location = format_location(row)
    dim_html = ""
    if dimensions:
        line = dimensions
        if support:
            line += f", {support}"
        dim_html = f"""
<div style='font-size: 80%'>{html.escape(line)}</div>
"""

    author_html = f"""
<div class="main_caption">Martin Jambon, {year}</div>
"""

    loc_html = ""
    if location:
        loc_html = f"""
<div style='font-style: italic'>{html.escape(location)}</div>
"""

    page_contents = f"""
<!doctype html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">
<head>
  <meta charset="utf-8" />
  <title>{html.escape(title)}</title>
  <style type="text/css">
    body {{
      background-color: white;
    }}

    div.center {{
      max-width: 80%;
      max-height: 60%;

      position: fixed;
      top: 0;
      bottom: 0;
      left: 0;
      right: 0;

      margin: auto;
      text-align: center;
    }}

    img.artwork {{
      max-height: 100%;
      max-width: 100%;
      object-fit: contain;
      text-align: left;
    }}

    .caption {{
      display: inline-block;
      width: 70%;

      margin: 3em 0em;
      color: grey;
    }}

    a {{
      color: inherit;
      text-decoration: none;
    }}
  </style>
</head>
<body>
  <div class="center">
    <img class="artwork" src="{img_url}"/>
    <div class="caption">
      <a href="{html.escape(gallery_url)}"
         title="view in gallery">
        {main_caption_html}{author_html}
        <div style="margin:1em 0em">
          {dim_html}{loc_html}
        </div>
      </a>
    </div>
  </div>
</body>
</html>
"""
    with open(html_file, "w") as out:
        out.write(page_contents)
    return img_page_url

def print_row(row: Dict[str, str],
              md_file: TextIO,
              force: bool = False) -> None:
    img_id = row['image_id']
    year = date.fromisoformat(row['date']).year
    title = get_title(row)
    img_name = img_id + '.jpg'
    hash_name = img_id

    img_page_url = make_standalone_page(row)

    # Generate images of different sizes
    orig = 'img/original/' + img_name

    large = 'img/large/' + img_name
    # JPEG image quality. Default quality is 92, max is 100.
    quality = "95"
    if force or needs_rebuild(orig, large):
        verbose_command(["convert", "-resize", "1600x1600",
                         "-quality", quality,
                         orig, large])

    medium = 'img/medium/' + img_name
    if force or needs_rebuild(orig, medium):
        verbose_command(["convert", "-resize", "800x800",
                         "-quality", quality,
                         orig, medium])

    # Padded square images for Instagram
    square = 'img/square/' + img_name
    if force or needs_rebuild(orig, square):
        verbose_command([
            "convert",
            orig,
            "-resize", "1450x1450>",
            "-background", "#eee",
            "-gravity", "center",
            "-extent", "1600x1600",
            "-quality", quality,
            square
        ])

    # This resizes the image on the page so that all images have the same
    # surface area. (except for those which are too wide, which will be
    # rendered with a smaller surface area)
    fig_margin = int((1.0 - figure_scaling(medium)) / 2 * 100)

    medium_img_url = IMG_PATH + '/medium/' + img_name

    main_caption = f"{title}"
    # Fragile: pandoc really wants to insert <p> elements but we're trying
    # to avoid that. The backslash below disables the insertion of <p>.
    main_caption_html = f"""
<div class="main_caption">
  {html.escape(main_caption)}
  <a href="#{html.escape(hash_name)}"
     title="Direct link to artwork"
     class="hash_link">#</a>\
</div>
"""

    dimensions = format_dimensions(row)
    support = format_support(row)
    location = format_location(row)
    dim_html = ""
    if dimensions:
        line = dimensions
        if support:
            line += f", {support}"
        dim_html = f"""
<div style='font-size: 80%'>{html.escape(line)}</div>
"""

    author_html = f"""
<div class="main_caption">Martin Jambon, {year}</div>
"""

    loc_html = ""
    if location:
        loc_html = f"""
<div style='font-style: italic'>{html.escape(location)}</div>\
"""

    # Write to main page
    md_file.write(
f"""
<a name="{html.escape(hash_name)}">
<figure style="margin: 0px {fig_margin}%; padding-top: 40px">
  <a href="{html.escape(img_page_url)}">
    <img src="{html.escape(medium_img_url)}"
         alt="abstract art"
         class="artwork"/>
  </a>
  <figcaption>
    {main_caption_html}{author_html}\
    <div style="margin:0.5em 0em">{dim_html}{loc_html}</div>
  </figcaption>
</figure>
"""
    )

VARIANTS = [
    ('faves', "artist's favorites", FAVES_PATH),
    ('all', 'all artworks', ALL_PATH),
]

# Generate the page-specific HTML for the full gallery (not series)
def make_page_html_all(faves_only: bool) -> str:
    active_variant = 'faves' if faves_only else 'all'
    links = []
    for variant, descr, path in VARIANTS:
        if variant == active_variant:
            text = descr
            htm = f"{html.escape(text)}"
        else:
            text = f"show {descr}"
            htm = f"""<a href="{html.escape(path)}"
   style="color:black">{html.escape(text)}</a>"""
        links.append(htm)
    links_html = " | ".join(links)

    return f"""
<div style="text-align:right">
  [<img src="/gallery/img/other/mj.png" style="height:1.5em;padding:0em 0.5em"
        title="Portfolio">](https://martinj.art/)
  [<img src="/gallery/img/other/instagram-logo.png"
        title="Instagram"
        style="height:1.5em;padding:0em 0.5em">](https://www.instagram.com/martinjambon/)
</div>
<p>
I started painting only in 2022 with no formal training.
Born in OrlÃ©ans, France in 1977,
I'm based in Palo Alto, in the San Francisco Bay Area, on the West Coast
of the United States.
</p>
<p>
Follow my progress via [Instagram](https://www.instagram.com/martinjambon/)
or email me at <a href="mailto:art@mjambon.com">art@mjambon.com</a>
as needed.
</p>
<p>
Are you interested in displaying my artworks in your public space for free?
I'd love to do that! Please get in touch.
</p>
<div>{links_html}</div>
"""

#
# We're producing mixed Markdown/HTML code. Beware that blank lines
# result in the creation of <p> elements.
#
def generate(page: Page,
             force: bool = False) -> None:
    print(f"### Generating {page.md_file}")
    rows = page.rows
    with open(page.md_file, 'w') as out:
        out.write(
        f"""% Martin J.
<!-- generated by './build' -->

<style>
/* Disable zoom-in on hover on touchscreens */
@media (hover: hover) {{
  body:hover img.artwork {{
    opacity: 0.2;
  }}

  body:hover img.artwork:hover {{
    opacity: 1.0;

    /* place the image in the foreground when zooming in */
    z-index: 1;
  }}

  img.artwork:hover {{
    /* zoom on hover */
    transform: scale(2.0);
  }}
}}

img.artwork {{
  /* grey frame around each artwork image */
  background-color:#eee;
  padding: 3%;
  width: 94%;

  position: relative;
  z-index: 0;

  /* zoom on hover */
  transition: transform .2s;
}}

figcaption {{
  color:#666;
  margin: 1em 0em;
}}

.hash_link {{
  visibility: hidden;
}}

/* Make the hash-link only visible when hovering over the title. */
.main_caption:hover .hash_link {{
  visibility: visible;
  color: #666;
}}
</style>
{page.page_specific_html}
"""
    )
        for row in rows:
            if row['show'] == '1':
                print_row(row, out, force=force)
        out.write(
        """
<p class="discreet" style="margin:4em 0em">
  [These artworks](https://mjambon.com/gallery/all) Â© 2022
  by [Martin Jambon](https://mjambon.com) are licensed under
  [CC BY-NC-ND 4.0](http://creativecommons.org/licenses/by-nc-nd/4.0/).
</p>
"""
        )


def load_artworks_csv() -> List[Dict[str, str]]:
    with open('artworks.csv', 'r') as csvfile:
        row_reader = csv.DictReader(csvfile)
        return list(row_reader)


def extract_series(rows: List[Dict[str, str]]) -> List[Page]:
    tbl: Dict[str, List[Dict[str,str]]] = {}
    for row in rows:
        key = row['series']
        if key:
            if key in tbl:
                tbl[key].append(row)
            else:
                tbl[key] = [row]
    def create_page(series_id: str, rows: List[Dict[str,str]]) -> Page:
        os.makedirs(f'series/{series_id}', exist_ok=True)
        return Page(
            folder=f'series/{series_id}',
            md_file=f'series/{series_id}/index.md',
            page_specific_html='',
            rows=rows
        )
    return [ create_page(series_id, rows) for series_id, rows in tbl.items() ]


def main() -> None:
    parser = argparse.ArgumentParser(description='Process some integers.')
    parser.add_argument('--force', action='store_true',
                    help='resize all images rather than being lazy about it')
    args = parser.parse_args()

    os.makedirs('img/large', exist_ok=True)
    os.makedirs('img/medium', exist_ok=True)

    rows = load_artworks_csv()

    # All artworks
    os.makedirs('all', exist_ok=True)
    page_all = Page(
        folder='all',
        md_file='all/index.md',
        page_specific_html=make_page_html_all(faves_only=False),
        rows=rows
    )
    generate(page_all, force=args.force)

    # Artist's picks
    page_faves = Page(
        folder='.',
        md_file='index.md',
        page_specific_html=make_page_html_all(faves_only=True),
        rows=[ row for row in rows if row['favorite'] == '1' ]
    )
    generate(page_faves, force=args.force)

    # Series
    os.makedirs('series', exist_ok=True)
    series_pages = extract_series(rows)
    for page in series_pages:
        generate(page, force=args.force)

    # Write makefile to be included in the main makefile
    with open('index.mk', 'w') as makefile_output:
        makefile_output.write('GALLERY_PATHS =')
        for page in series_pages:
            makefile_output.write(f""" \\\n  gallery/{page.folder}""")
        makefile_output.write("\n")

main()
