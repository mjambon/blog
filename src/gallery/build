#!/usr/bin/env python3
#
# Create the gallery html page from the list of images found in img/
# using the database data.csv
#

from datetime import date
from typing import Any, Dict, List, Optional, TextIO, Tuple
import argparse
import csv
import json
import html
import math
import os
import subprocess

FAVES_PATH = '/gallery'
ALL_PATH = '/gallery/all'
IMG_PATH = '/gallery/img'

# The built-in '.capitalize()' method will downcase the rest of the string,
# which we don't want.
def capitalize(s: str) -> str:
    if len(s) > 0:
        return s[0].upper() + s[1:]
    else:
        return s

# Uses 'identify' from ImageMagick
def image_dimensions(image_filename: str) -> Tuple[int, int]:
    p = subprocess.run([
        "identify",
        "-format",
        '{"width":%[fx:w], "height":%[fx:h]}',
        image_filename
    ], capture_output=True)
    dic = json.loads(p.stdout.decode())
    return (dic['width'], dic['height'])

def figure_scaling(image_filename: str) -> float:
    (width, height) = image_dimensions(image_filename)
    aspect_ratio = float(width) / float(height)
    # sqrt(2) is the aspect ratio of A5, A4, A3, etc.
    max_aspect_ratio = math.sqrt(2.)
    if aspect_ratio >= max_aspect_ratio:
        return 1.0
    else:
        return math.sqrt(aspect_ratio / max_aspect_ratio)

def needs_rebuild(src: str, dst: str) -> bool:
    return not os.path.isfile(dst) \
        or os.path.getmtime(dst) < os.path.getmtime(src)

def inches_to_cm(x: float) -> float:
    return 2.54 * x

def format_dimensions(row: Dict[str, Any]) -> Optional[str]:
    width_cm = -1.0
    height_cm = -1.0
    if row['width_in'] and row['height_in']:
        width_cm = inches_to_cm(float(row['width_in']))
        height_cm = inches_to_cm(float(row['height_in']))
    if row['width_cm'] and row['height_cm']:
        width_cm = float(row['width_cm'])
        height_cm = float(row['height_cm'])
    if width_cm > 0:
        return f"{width_cm:.1f} cm × {height_cm:.1f} cm"
    else:
        return None


def verbose_command(argv: List[str]) -> None:
    print(f"{' '.join(argv)}")
    subprocess.run(argv)


def print_row(row: Dict[str, Any],
              md_file: TextIO,
              force: bool = False) -> None:
    img_id = row['image_id']
    year = date.fromisoformat(row['date']).year
    title = capitalize(row['title'])
    if not title:
        title = 'Untitled'
    img_name = img_id + '.jpg'

    # Generate images of different sizes
    orig = 'img/original/' + img_name

    large = 'img/large/' + img_name
    if force or needs_rebuild(orig, large):
        verbose_command(["convert", "-resize", "1600x1600", orig, large])

    medium = 'img/medium/' + img_name
    if force or needs_rebuild(orig, medium):
        verbose_command(["convert", "-resize", "800x800", orig, medium])

    # This resizes the image on the page so that all images have the same
    # surface area. (except for those which are too wide, which will be
    # rendered with a smaller surface area)
    fig_margin = int((1.0 - figure_scaling(medium)) / 2 * 100)

    large_img_url = IMG_PATH + '/large/' + img_name
    medium_img_url = IMG_PATH + '/medium/' + img_name

    main_caption = f"{title}, {year}"
    main_caption_html = f"<div>{html.escape(main_caption)}</div>"

    dimensions = format_dimensions(row)
    dim_html = ""
    if dimensions:
        dim_html = f"""
<div style='font-size: 80%'>{html.escape(dimensions)}</div>
"""

    # Write to main page
    md_file.write(
f"""
<figure style="margin: 0px {fig_margin}%; padding-top: 40px">
  <a href="{html.escape(large_img_url)}">
    <img src="{html.escape(medium_img_url)}"
         alt='abstract art'
         style="background-color:#eee; padding:3%; width: 94%"/>
  </a>
  <figcaption style="color:#666; margin: 1em 0em">
    {main_caption_html}
    {dim_html}
  </figcaption>
</figure>
"""
    )

VARIANTS = [
    ('faves', "artist's favorites", FAVES_PATH),
    ('all', 'all artworks', ALL_PATH),
]

#
# We're producing mixed Markdown/HTML code. Beware that blank lines
# result in the creation of <p> elements.
#
def generate(row_reader: Any,
             md_file: TextIO,
             faves_only: bool = False,
             force: bool = False) -> None:
    active_variant = 'faves' if faves_only else 'all'

    links = []
    for variant, descr, path in VARIANTS:
        if variant == active_variant:
            text = descr
            htm = f"{html.escape(text)}"
        else:
            text = f"show {descr}"
            htm = f"""<a href="{html.escape(path)}"
   style="color:black">{html.escape(text)}</a>"""
        links.append(htm)
    links_html = " | ".join(links)

    md_file.write(
        f"""% Martin J.
<!-- generated by './build' -->

<div style="text-align:right">[<img src="/gallery/img/other/instagram-logo.png" style="height:1.5em;padding:0em 0.5em">](https://www.instagram.com/martinjambon/)</div>
<div>{links_html}</div>
"""
    )
    for row in row_reader:
        if row['show'] == '1' and (row['favorite'] == '1' or not faves_only):
            print_row(row, md_file, force=force)
    md_file.write(
        """
<p class="discreet" style="margin-top:4em">
  [These artworks](https://mjambon.com/gallery/all) © 2022
  by [Martin Jambon](https://mjambon.com) are licensed under
  [CC BY-NC-ND 4.0](http://creativecommons.org/licenses/by-nc-nd/4.0/).
</p>

<p class="discreet">
Lending artworks to friends in the San Francisco Bay Area.
</p>
"""
    )


def make_page(md_filename: str,
              faves_only: bool = False,
              force: bool = False) -> None:
   with open('data.csv', 'r') as csvfile:
       row_reader = csv.DictReader(csvfile)
       with open(md_filename, 'w') as mdfile:
           generate(row_reader, mdfile, faves_only=faves_only, force=force)


def main() -> None:
    parser = argparse.ArgumentParser(description='Process some integers.')
    parser.add_argument('--force', action='store_true',
                    help='resize all images rather than being lazy about it')
    args = parser.parse_args()

    os.makedirs('img/large', exist_ok=True)
    os.makedirs('img/medium', exist_ok=True)

    # Artist's picks
    make_page('index.md', faves_only=True, force=args.force)

    # All artworks
    os.makedirs('all', exist_ok=True)
    make_page('all/index.md', faves_only=False, force=args.force)

main()
