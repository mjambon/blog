#!/usr/bin/env python3
#
# Create the gallery html page from the list of images found in img/
# using the database data.csv
#

from datetime import date
from typing import Any, Dict, TextIO, Tuple
import csv
import json
import html
import math
import os
import subprocess

# The built-in '.capitalize()' method will downcase the rest of the string,
# which we don't want.
def capitalize(s: str) -> str:
    if len(s) > 0:
        return s[0].upper() + s[1:]
    else:
        return s

# Uses 'identify' from ImageMagick
def image_dimensions(image_filename: str) -> Tuple[int, int]:
    p = subprocess.run([
        "identify",
        "-format",
        '{"width":%[fx:w], "height":%[fx:h]}',
        image_filename
    ], capture_output=True)
    dic = json.loads(p.stdout.decode())
    return (dic['width'], dic['height'])

def figure_scaling(image_filename: str) -> float:
    (width, height) = image_dimensions(image_filename)
    aspect_ratio = float(width) / float(height)
    # sqrt(2) is the aspect ratio of A5, A4, A3, etc.
    max_aspect_ratio = math.sqrt(2.)
    if aspect_ratio >= max_aspect_ratio:
        return 1.0
    else:
        return math.sqrt(aspect_ratio / max_aspect_ratio)

def print_row(row: Dict[str, Any], md_file: TextIO) -> None:
    img_id = row['identifier']
    year = date.fromisoformat(row['date']).year
    title = capitalize(row['title'])
    if not title:
        title = 'Untitled'
    img_name = img_id + '.jpg'

    # Generate images of different sizes
    orig = 'img/original/' + img_name

    large = 'img/large/' + img_name
    if not os.path.isfile(large):
        subprocess.run(["convert", "-resize", "1600x1600", orig, large])

    medium = 'img/medium/' + img_name
    if not os.path.isfile(medium):
        subprocess.run(["convert", "-resize", "800x800", orig, medium])

    # This resizes the image on the page so that all images have the same
    # surface area. (except for those which are too wide, which will be
    # rendered with a smaller surface area)
    fig_margin = int((1.0 - figure_scaling(medium)) / 2 * 100)

    # Write to main page
    caption = f"""{title}, {year}"""
    md_file.write(
f"""
<figure style="margin: 0px {fig_margin}%; padding-top: 40px">
  <a href="{html.escape(large)}">
    <img src="{html.escape(medium)}" alt='abstract art' />
  </a>
  <figcaption style="color:#666; margin: 1em 0em">
    {html.escape(caption)}
  </figcaption>
</figure>
"""
    )

def generate(row_reader: Any, md_file: TextIO) -> None:
    md_file.write(
        """% Artwork by Martin Jambon
<!-- generated by './build' -->

<p>
[<img src="img/other/instagram-logo.png" style="height:1.5em;padding:0em 0.5em">](https://www.instagram.com/martinjambon/)
[<img src="img/other/twitter-logo.png" style="height:1.5em;padding:0em 0.5em">](https://twitter.com/mjambon)
[<img src="img/other/facebook-logo.png" style="height:1.5em;padding:0em 0.5em">](https://facebook.com/0xfff)
</p>
"""
    )
    for row in row_reader:
        if row['show'] == '1':
            print_row(row, md_file)
    md_file.write(
        """
<p class="discreet" style="margin-top:4em">
  [These artworks](https://mjambon.com/gallery) ¬© 2022
  by [Martin Jambon](https://mjambon.com) are licensed under
  [CC BY-NC-ND 4.0](http://creativecommons.org/licenses/by-nc-nd/4.0/).
  If you would like to borrow the originals for display in a
  public venue, please contact the artist
  <a href="mailto:martin@mjambon.com">martin@mjambon.com</a>. üôè
</p>
"""
    )

def main() -> None:
    os.makedirs('img/large', exist_ok=True)
    os.makedirs('img/medium', exist_ok=True)
    with open('data.csv', 'r') as csvfile:
        row_reader = csv.DictReader(csvfile)
        with open('index.md', 'w') as mdfile:
            generate(row_reader, mdfile)

main()
